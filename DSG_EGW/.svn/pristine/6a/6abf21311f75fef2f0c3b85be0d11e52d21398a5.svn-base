<!DOCTYPE html>
<html lang="ko">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
		<link rel="stylesheet" type="text/css" href="dynatree-1.2.8/src/skin/ui.dynatree.css"/>
		<link rel="stylesheet" type="text/css" href="contextmenu/jquery.contextMenu.css">
		
		<script type="text/javascript" src="lib/jquery-1.12.3.js"></script>
		<script type="text/javascript" src="lib/jquery-ui-1.10.2.min.js"></script>
		<script type="text/javascript" src="dynatree-1.2.8/jquery/jquery.cookie.js"></script>
		<script type="text/javascript" src="dynatree-1.2.8/src/jquery.dynatree.js"></script>
		<script type="text/javascript" src="contextmenu/jquery.contextMenu.js"></script>
		
		<script type="text/javascript">
			var uniqueID = 0;
			var dragInfo = null;
			var dragMessage = {
				draggable : function() {
					$(".ui-draggable").draggable({
						containment: "document",
						appendTo: "body",
						cursorAt: { top: -2, left: -3 },
						helper: function() {
							//폴더 편집중이라면 blur 처리한다.
							$("input#editNode").blur();
							dragInfo = [];
							var id = $(this).attr("id");
							var title = dragMessage.escapeHtml($(this).html());
							dragInfo.push([id, title]);
							return $("<div class='tooltip_move no_bg pd_lft_10'>" + title + "</div>");
						},
						connectToDynatree: true
					});
				},
				escapeHtml : function(str) {
					var charMap = {
						'<' : '&lt;',
						'>' : '&gt;',
						'&' : '&amp;',
						'"' : '&quot;',
						"'" : '&#39;'
					};
					return str.replace(/[<>&"']/g, function(ch) {
						return charMap[ch];
					});
				}
			};
			
			var treeMessage = {
				folderUnLazy : function(node) {
					if(node == null || !node.data.isFolder) {
						return;
					}
					//isLazy로 폴더의 그룹정보을 펼친후 그룹을 하나씩 모두 삭제했을때 폴더가 자식노드가 없는데 - 표시로 인해 - + 반복하면 로딩 오류문제 수정
					if(node.data.isLazy && node.hasChildren() == undefined) {
						//1. expand true 가 제일먼저 정의되어야 한다.
						node.expand(true);
						//2. isLazy false 로 되어야한다.
						node.data.isLazy = false;
						//3. expand click 하여 폴더의 잘못된 표시 제거한다.
						node.toggleExpand();
					}
				}
			};

			var handleMessage = {
				createFolder : function() {
					var res = [
						{"title": "", "isFolder": true}
					];
					var node = $("#tree").dynatree("getRoot").addChild(res);
					var prevTitle = node.data.title;
					
					$(".dynatree-title", node.span).html("<input id='editNode' value='folder'>");
					$("input#editNode").focus().keydown(function(event) {
						switch( event.which ) {
							case 27:	// esc
								$("input#editNode").val(prevTitle);
								$(this).blur();
								break;
							case 13:	// enter
								$(this).blur();
								break;
							default:
								break;
						}
					}).blur(function(event){
						var title = $("input#editNode").val();
						if(title == "") {
							node.remove();
							return;
						}

						var stringLength = title.length + (escape(title)+"%u").match(/%u/g).length-1;
						if(stringLength > 60) {
							//alert('폴더명 한글60자(영문 120자) 이상 입력할 수 없습니다.');
							alert('can not input more than 120 characters.');
							title = handleMessage.byteSubstring(title, 0, 60);
						}
						
						// 폴더생성 처리 및 id 조회
						node.data.key = "folder_"+uniqueID++;
						node.setTitle("<span class='node-folder' key='" + node.data.key + "'>" + title + "</span>");
						node.render();
						node.deactivate();
					});
				},
				updateFolder : function(node) {
					var prevTitle = $(node.data.title).html();
					
					// 폴더변경일때 input태그에 백스페이스 키등이 동작하지 않는 문제수정.
					// jquery.dynatree.js -> bind() -> see 3009 line of "modify by Square Plus".
					node.data.title = "";
					
					$(".dynatree-title", node.span).html("<input id='editNode' value='" + prevTitle + "'>");
					$("input#editNode").focus().keydown(function(event) {
						switch( event.which ) {
							case 27:	// esc
								$("input#editNode").val(prevTitle);
								$(this).blur();
								break;
							case 13:	// enter
								$(this).blur();
								break;
							default:
								break;
						}
					}).blur(function(event){
						var title = $("input#editNode").val();
						if(title == "") {
							title = prevTitle;
						}
						
						var stringLength = title.length + (escape(title)+"%u").match(/%u/g).length-1;
						if(stringLength > 60) {
							//alert('폴더명 한글60자(영문 120자) 이상 입력할 수 없습니다.');
							alert('can not input more than 120 characters.');
							title = handleMessage.byteSubstring(title, 0, 60);
						}

						// 폴더변경 처리
						node.setTitle("<span class='node-folder' key='" + node.data.key + "'>" + title + "</span>");
						node.render();
						node.deactivate();
					});
				},
				deleteFolder : function(node) {
					var folderInfo = [];
					var groupInfo = [];
					// 폴더삭제처리, 그룹 -> 진행중 이동
					node.visit(function(groupNode){
						groupInfo.push(groupNode.data.key);
					});
					folderInfo.push(node.data.key);
					node.remove();
				},
				deleteGroup : function(node) {
					var parentNode = node.getParent();
					var groupInfo = [];
					// 그룹 -> 진행중 이동
					groupInfo.push(node.data.key);
					node.remove();
					//isLazy로 폴더의 그룹정보을 펼친후 그룹을 하나씩 모두 삭제했을때 폴더가 자식노드가 없는데 - 표시로 인해 - + 반복하면 로딩 오류문제 수정 
					if(parentNode.data.isLazy && typeof parentNode.hasChildren() == 'undefined') {
						parentNode.data.isLazy = false;
						parentNode.toggleExpand();
					}
				},
				byteSubstring : function(str, st, ed) {
					var arr = [];
					var b = 0;
					for(var i=0, m=str.length; i<m; i++) {
						if(str.charCodeAt(i)>127) {
							arr.push(i);
							arr.push(i);
	  					} else {
	    					arr.push(i);
	  					}
					}
					if(arr[st]==arr[ed]) {
						return false;
					} else {
						return str.substring(arr[st],arr[ed])
					}
				}
			};
			
			$(document).ready(function() {
				$("#tree").dynatree({
					checkbox: true,
					//classNames: {checkbox: "dynatree-radio"},
					//checkMode: 1,
					checkMode: 2,
					clickFolderMode: 3, //1:activate, 2:expand, 3:activate and expand
					onActivate: function(node) {
						if(!node.data.isFolder) {
							alert(node.data.key);
						}
						return false;
					},
					onClick: function(node, event) {
						$("input#editNode").blur();
					},
					children: [
						{"title": "<span class='node-folder' key='2015'>2015</span>", "isFolder": true, "key": "2015", "isLazy": true},
						{"title": "<span class='node-folder' key='2016'>2016</span>", "isFolder": true, "key": "2016", "isLazy": true},
						{"title": "<span class='node-folder' key='2017'>2017</span>", "isFolder": true, "key": "2017"}
					],
					onLazyRead: function(node) {
						$("input#editNode").blur();
						if(node.data.key == "2015") {
							var res = [
								{"title": "<span class='node-group' key='file_1'>file_1</span>", "key": "file_1"},
								{"title": "<span class='node-group' key='file_2'>file_2</span>", "key": "file_2"}
							];
							node.addChild(res);
						}
						if(node.data.key == "2016") {
							var res = [
								{"title": "<span class='node-group' key='group_1'>group_1</span>", "key": "group_1"},
								{"title": "<span class='node-group' key='group_2'>group_2</span>", "key": "group_2"},
								{"title": "<span class='node-group' key='group_3'>group_3</span>", "key": "group_3"},
							];
							node.addChild(res);
						}
					},
					dnd: {
						onDragStart: function(node) {
							//폴더 편집중이라면 blur 처리한다.
							$("input#editNode").blur();
							return true;
						},
						onDragStop: function(node) {
						},
						autoExpandMS: 1000,
						preventVoidMoves: true,
						onDragEnter: function(node, sourceNode) {
							return true;
						},
						onDragOver: function(node, sourceNode, hitMode) {
							// logMsg("tree.dnd.onDragOver", node, sourceNode, hitMode);
							if(sourceNode != null && node.isDescendantOf(sourceNode)) {
								return false;
							}
							
							if(node.data.isFolder) {
								if((sourceNode == null ||  !sourceNode.data.isFolder) && hitMode != "over") {
									return "over"
								}
								if(sourceNode && sourceNode.data.isFolder && hitMode == "over") {
									return "after";
								}
							}
							
							if(!node.data.isFolder) {
								if(sourceNode && sourceNode.data.isFolder) {
									return false;
								}
								if(hitMode == "over") {
									return "after";
								}
							}
						},
						onDrop: function(node, sourceNode, hitMode, ui, draggable) {
							// logMsg("tree.dnd.onDrop", node, sourceNode, hitMode);
							if(node.data.isFolder) {
								if((sourceNode == null ||  !sourceNode.data.isFolder) && hitMode != "over") {
									hitMode = "over"
								}
								else if(sourceNode && sourceNode.data.isFolder && hitMode == "over") {
									hitMode = "after";
								}
							}
							else if(!node.data.isFolder && hitMode == "over") {
								hitMode = "after";
							}
							
							if(sourceNode == null) {
								if(dragInfo == null || dragInfo.length < 1) {
									return;
								}
								var res = [
									{"title": "<span class='node-group' key='" + dragInfo[0][0] + "'>" + dragInfo[0][1] + "</span>", "key": dragInfo[0][0]}
								];
								if(node.data.isFolder) {
									treeMessage.folderUnLazy(node);
									node.addChild(res);
								} else {
									var parentNode = node.getParent();
									var newNode = parentNode.addChild(res);
									newNode.move(node, hitMode);
								}
							} else {
								sourceNode.move(node, hitMode);
							}
							
							if(node.data.isFolder && hitMode == "over") {
								node.expand(true);
							}
						},
						onDragLeave: function(node, sourceNode) {
						}
					}
				});
				
				dragMessage.draggable();
				contextMessage.defaultMenu();
			});
			
			var contextMessage = {
				defaultMenu : function() {
					$.contextMenu({
						selector: '.dynatree-title .node-folder',
						callback: function(key, options) {
							var nodekey = $(this).attr("key");
							var node = $("#tree").dynatree("getTree").getNodeByKey(nodekey);
							if(key == "edit") {
								handleMessage.updateFolder(node);
							} else if(key == "delete") {
								handleMessage.deleteFolder(node);
							}
						},
						items: {
							"edit": {name: "Edit", icon: "edit"},
							"delete": {name: "Delete", icon: "delete"}
						}
					});
					/*
					$.contextMenu({
						selector: '.dynatree-title .node-folder',
						trigger : 'left',
						callback: function(key, options) {
							var nodekey = $(this).attr("key");
							var node = $("#tree").dynatree("getTree").getNodeByKey(nodekey);
							if(key == "edit") {
								handleMessage.updateFolder(node);
							} else if(key == "delete") {
								handleMessage.deleteFolder(node);
							}
						},
						items: {
							"edit": {name: "Edit", icon: "edit"},
							"delete": {name: "Delete", icon: "delete"}
						}
					});
					*/
					$.contextMenu({
						selector: '.dynatree-title .node-group',
						callback: function(key, options) {
							var nodekey = $(this).attr("key");
							var node = $("#tree").dynatree("getTree").getNodeByKey(nodekey);
							if(key == "cancel") {
								handleMessage.deleteGroup(node);
							}
						},
						items: {
							"cancel": {name: "Cancel", icon: "cancel"}
						}
					});
					
					$.contextMenu({
						selector: '.ui-draggable',
						callback: function(key, options) {
							var id = $(this).attr("id");
							alert(key + ":" + id);
						},
						items: {
							"move": {name: "Move", icon: "move"}
						}
					});
				}
			};
		</script>
	</head>
	<body>
		<div>
			ING GROUP
			<div class="ui-draggable" id="baseball">baseball</div>
			<div class="ui-draggable" id="soccer">soccer</div>
		</div>
		<br>
		<div>
			MY GROUP <a href="javascript:handleMessage.createFolder();">+</a>
			<div id="tree"></div>
		</div>
	</body>
</html>